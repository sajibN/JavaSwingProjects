package Notepad;


import java.awt.Color;
import java.awt.Font;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

 
public class NotePad extends javax.swing.JFrame {
    private UndoManager undoManager = new UndoManager();
    private int fontSize = 14;
 
    public NotePad() {
        initComponents();
        jTextArea1.setFont(new Font(jTextArea1.getFont().getName(), Font.PLAIN, fontSize));
        
        jTextArea1.getDocument().addUndoableEditListener(e -> undoManager.addEdit(e.getEdit()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        newTab = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        saveAs = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        openfile = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        undo = new javax.swing.JMenuItem();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        redo = new javax.swing.JMenuItem();
        view = new javax.swing.JMenu();
        zoomIn = new javax.swing.JMenuItem();
        zoomOut = new javax.swing.JMenuItem();
        Ch_color = new javax.swing.JMenu();
        fontColor = new javax.swing.JMenuItem();
        BGColor = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        Max = new javax.swing.JMenuItem();
        Min = new javax.swing.JMenuItem();
        norm = new javax.swing.JMenuItem();
        close = new javax.swing.JMenu();
        exit_window = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("TabbedPane"); // NOI18N

        tabbedPane.setBackground(new java.awt.Color(255, 255, 255));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        tabbedPane.addTab(" ", jScrollPane1);

        jMenuBar1.setBackground(new java.awt.Color(153, 0, 153));
        jMenuBar1.setForeground(new java.awt.Color(0, 0, 204));
        jMenuBar1.setMaximumSize(new java.awt.Dimension(1111, 32768));

        file.setText("File");

        newTab.setText("New Tab");
        newTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTabActionPerformed(evt);
            }
        });
        file.add(newTab);

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        file.add(save);

        saveAs.setText("Save as");
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });
        file.add(saveAs);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        file.add(exit);

        openfile.setText("Open File");
        openfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openfileActionPerformed(evt);
            }
        });
        file.add(openfile);

        jMenuBar1.add(file);

        edit.setText("Edit");

        undo.setText("Undo");
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });
        edit.add(undo);

        copy.setText("Copy");
        copy.setToolTipText("");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        edit.add(copy);
        copy.getAccessibleContext().setAccessibleDescription(" ");

        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });
        edit.add(paste);

        redo.setText("Redo");
        redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoActionPerformed(evt);
            }
        });
        edit.add(redo);

        jMenuBar1.add(edit);

        view.setText("View");

        zoomIn.setText("Zoom in");
        zoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInActionPerformed(evt);
            }
        });
        view.add(zoomIn);

        zoomOut.setText("Zoom out");
        zoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutActionPerformed(evt);
            }
        });
        view.add(zoomOut);

        jMenuBar1.add(view);

        Ch_color.setText("Changing Color");

        fontColor.setText("Font Color");
        fontColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontColorActionPerformed(evt);
            }
        });
        Ch_color.add(fontColor);

        BGColor.setText("Background Color");
        BGColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGColorActionPerformed(evt);
            }
        });
        Ch_color.add(BGColor);

        jMenuBar1.add(Ch_color);

        jMenu1.setText("Maximise/Minimise");

        Max.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        Max.setText("(+)");
        Max.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaxActionPerformed(evt);
            }
        });
        jMenu1.add(Max);

        Min.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        Min.setText("(-)");
        Min.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinActionPerformed(evt);
            }
        });
        jMenu1.add(Min);

        norm.setText("Normal");
        norm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normActionPerformed(evt);
            }
        });
        jMenu1.add(norm);

        jMenuBar1.add(jMenu1);

        close.setText("Close Window");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        exit_window.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        exit_window.setForeground(new java.awt.Color(255, 0, 51));
        exit_window.setText("EXIT");
        exit_window.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_windowActionPerformed(evt);
            }
        });
        close.add(exit_window);

        jMenuBar1.add(close);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 910, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(924, 513));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void newTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTabActionPerformed
        JTextArea textArea = new JTextArea();
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        JScrollPane scrollPane = new JScrollPane(textArea);
        tabbedPane.addTab("New Tab X", scrollPane);
        tabbedPane.setSelectedComponent(scrollPane);
    }//GEN-LAST:event_newTabActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
         JTextArea currentTextArea = getCurrentTextArea();
        if (currentTextArea != null) {
            JFileChooser fileChooser = new JFileChooser();
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                saveToFile(file, currentTextArea.getText());
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsActionPerformed
        JTextArea currentTextArea = getCurrentTextArea();
        if (currentTextArea != null) {
            JFileChooser fileChooser = new JFileChooser();
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                saveToFile(file, currentTextArea.getText());
            }
        }
    }//GEN-LAST:event_saveAsActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        if (undoManager.canUndo()) {
            try {
                undoManager.undo();
            } catch (CannotUndoException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_undoActionPerformed

    private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
        if (undoManager.canRedo()) {
            try {
                undoManager.redo();
            } catch (CannotRedoException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_redoActionPerformed

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        JTextArea currentTextArea = getCurrentTextArea();
        if (currentTextArea != null) {
            currentTextArea.copy();
        }
    }//GEN-LAST:event_copyActionPerformed

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        JTextArea currentTextArea = getCurrentTextArea();
        if (currentTextArea != null) {
            currentTextArea.paste();
        }
    }//GEN-LAST:event_pasteActionPerformed

    private void zoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInActionPerformed
        fontSize += 2;
        updateFontSize();
    }//GEN-LAST:event_zoomInActionPerformed

    private void zoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutActionPerformed
        fontSize -= 2;
        updateFontSize();
    }//GEN-LAST:event_zoomOutActionPerformed

    private void openfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openfileActionPerformed
         JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                // Read the file contents into the JTextArea of the current tab
                String content = new String(Files.readAllBytes(file.toPath()));
                JTextArea currentTextArea = getCurrentTextArea();
                if (currentTextArea != null) {
                    currentTextArea.setText(content);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error opening file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_openfileActionPerformed

    private void fontColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontColorActionPerformed
        Color color = JColorChooser.showDialog(this, "Choose Font Color", Color.BLACK);
        if (color != null) {
            JTextArea currentTextArea = getCurrentTextArea();
            if (currentTextArea != null) {
                currentTextArea.setForeground(color);
            }
        }
    }//GEN-LAST:event_fontColorActionPerformed

    private void BGColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGColorActionPerformed
        Color color = JColorChooser.showDialog(this, "Choose Font Color", Color.BLACK);
        if (color != null) {
            JTextArea currentTextArea = getCurrentTextArea();
            if (currentTextArea != null) {
                 currentTextArea.setBackground(color);
            }
        }
    }//GEN-LAST:event_BGColorActionPerformed

    private void MaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaxActionPerformed
        setExtendedState(getExtendedState() | JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_MaxActionPerformed

    private void MinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinActionPerformed
        setExtendedState(getExtendedState() | JFrame.ICONIFIED);
    }//GEN-LAST:event_MinActionPerformed

    private void normActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normActionPerformed
       setExtendedState(JFrame.NORMAL);
    }//GEN-LAST:event_normActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        
    }//GEN-LAST:event_closeActionPerformed

    private void exit_windowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_windowActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exit_windowActionPerformed

    private void updateFontSize() {
        JTextArea currentTextArea = getCurrentTextArea();
        if (currentTextArea != null) {
            currentTextArea.setFont(new Font(currentTextArea.getFont().getName(), Font.PLAIN, fontSize));
        }
    }
    
    private JTextArea getCurrentTextArea() {
        JScrollPane scrollPane = (JScrollPane) tabbedPane.getSelectedComponent();
        if (scrollPane != null) {
            return (JTextArea) scrollPane.getViewport().getView();
        }
        return null;
    }

  private void saveToFile(File file, String content) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(content);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Failed to save the file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotePad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem BGColor;
    private javax.swing.JMenu Ch_color;
    private javax.swing.JMenuItem Max;
    private javax.swing.JMenuItem Min;
    private javax.swing.JMenu close;
    private javax.swing.JMenuItem copy;
    private javax.swing.JMenu edit;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenuItem exit_window;
    private javax.swing.JMenu file;
    private javax.swing.JMenuItem fontColor;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem newTab;
    private javax.swing.JMenuItem norm;
    private javax.swing.JMenuItem openfile;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem redo;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem saveAs;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JMenuItem undo;
    private javax.swing.JMenu view;
    private javax.swing.JMenuItem zoomIn;
    private javax.swing.JMenuItem zoomOut;
    // End of variables declaration//GEN-END:variables
}
